{"version":3,"sources":["core/utils/constants.ts","elements/header/index.tsx","core/redux/action.ts","core/utils/cutText.ts","elements/task/index.tsx","core/utils/generateUUID.ts","elements/newTask/index.tsx","core/models/task.ts","elements/buttonClearAll/index.tsx","elements/taskList/index.tsx","elements/buttonEvents/index.tsx","container/home/index.tsx","core/utils/initialState.ts","core/utils/isExpiredTask.ts","core/redux/reducer.ts","core/redux/store.ts","container/app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionsTypes","Header","cutText","text","length","slice","TaskItem","date","id","expired","dispatch","useDispatch","deleteTaskItem","event","target","closest","getAttribute","type","DELETE_TASK","deleteTask","String","className","data-id","Date","toDateString","onClick","uuid","replace","c","crypto","getRandomValues","Uint8Array","toString","NewTask","inputElement","React","createRef","ref","placeholder","maxLength","size","input","current","value","task","createTask","ADD_TASK","addTask","ButtonClearAll","DELETE_ALL_TASKS","console","log","connect","state","tasks","taskReducer","map","item","ButtonEvents","href","Home","initialState","isExpiredTask","localStorage","JSON","parse","action","filter","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","subscribe","stringify","getState","App","path","component","exact","TaskList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a484f41b.chunk.js","sourcesContent":["export const constants = {\n    ADD_TASK: 'ADD_TASK',\n    DELETE_TASK: 'DELETE_TASK',\n    DELETE_ALL_TASKS: 'DELETE_ALL_TASKS',\n}\n\n export enum ActionsTypes {\n    ADD_TASK = 'ADD_TASK',\n    DELETE_TASK = 'DELETE_TASK',\n    DELETE_ALL_TASKS = 'DELETE_ALL_TASKS',\n }","import React from 'react';\nimport './style.css';\n\nconst Header: React.FC = () => {\n\n    return (\n        <header>\n            <h1>Task Manager</h1>\n        </header>\n    );\n};\n\n\n\nexport default Header;","import { ActionsType } from '../models/types';\nimport { ActionsTypes } from '../utils/constants';\n\ntype addTaskActionProps = {\n    id: string,\n    date: number,\n    text: string,\n    expired: boolean,\n}\n\ntype deleteTaskActionProps = {\n    id: string,\n} \n\nexport const addTask = ({ id, date, text }: addTaskActionProps): ActionsType => ({\n    type: ActionsTypes.ADD_TASK,\n    id,\n    date,\n    text,\n    expired: false,\n});\n\nexport const deleteTask = ({ id }: deleteTaskActionProps): ActionsType => ({\n    type: ActionsTypes.DELETE_TASK,\n    id,\n});\n\nexport const deleteAllTasks = (): ActionsType => ({\n    type: ActionsTypes.DELETE_ALL_TASKS,\n});","type cutTextProps = string;\n\nexport const cutText = (text: cutTextProps):cutTextProps => {\n    if (text.length < 56) return text;\n    else return `${text.slice(0, 53)}...`;\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux'\nimport { deleteTask } from '../../core/redux/action';\nimport './style.css';\nimport { Task } from '../../core/models/task';\nimport { cutText } from '../../core/utils/cutText';\n\nconst TaskItem: React.FC<Task> = ({ date, text, id, expired }: Task) => {\n\n    const dispatch = useDispatch();\n\n    const deleteTaskItem = (event: any) => {\n        const id = event.target.closest('.task-item').getAttribute('data-id');\n        dispatch(deleteTask({ id: String(id) }));\n    }\n\n    if (expired) {\n        return (\n            <div className=\"task-item expired\" data-id={id}>\n                <span>{new Date(date).toDateString()}</span>\n                <p>{cutText(text)}</p>\n                <span className=\"delete-task\" onClick={deleteTaskItem}>❌</span>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"task-item\" data-id={id}>\n                <span>{new Date(date).toDateString()}</span>\n                <p>{cutText(text)}</p>\n                <span className=\"delete-task\" onClick={deleteTaskItem}>❌</span>\n            </div>\n        );\n    }\n};\n\n\n\nexport default TaskItem;\n","/* eslint-disable */\n//@ts-ignore\nconst uuid = () => ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c => (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16));\n\nexport default uuid;","import React from 'react';\nimport { useDispatch } from 'react-redux'\nimport { createTask } from '../../core/models/task'\nimport { addTask } from '../../core/redux/action';\nimport './style.css';\n\n\nconst NewTask: React.FC = () => {\n    \n    const dispatch = useDispatch()\n\n    const inputElement: React.RefObject<HTMLInputElement> = React.createRef()\n        \n    const addNewTask = () => {\n        const input = inputElement.current?.value\n        const task = createTask({ text: String(input) });\n        dispatch(addTask(task));\n    }\n\n    return (\n        <div className=\"new-task\">\n            <input \n                ref={inputElement}\n                type=\"text\"\n                placeholder=\"Enter new task\"\n                maxLength={120}\n                size={50}>\n            </input>\n            <div className=\"button-add-task\" onClick={addNewTask}>\n                <span>Add new task</span>\n            </div>\n        </div>\n    );\n};\n\n\n\nexport default NewTask;\n","import uuid from '../utils/generateUUID';\n\nexport type Task = {\n    id: string;\n    date: number;\n    text: string;\n    expired: boolean;\n};\n\ntype createTaskProps = {\n    text: string,\n}\n\nexport const createTask = ({ text }: createTaskProps): Task => ({\n    id: uuid(),\n    date: +new Date + 604800000,\n    text: text,\n    expired: false,\n});\n","import React from 'react';\nimport { useDispatch } from 'react-redux'\nimport { deleteAllTasks } from '../../core/redux/action';\nimport './style.css';\n\nconst ButtonClearAll: React.FC = () => {\n\n    const dispatch = useDispatch();\n\n    const ClearAll = () => {\n        dispatch(deleteAllTasks())\n        console.log('clear all tasks')\n    }\n\n    return (\n        <div className=\"button-clear-all-wrapper\">\n            <div className=\"button-clear-all\" onClick={ClearAll}>\n                <span>Clear All</span>\n            </div>\n        </div>\n    );\n};\n\n\n\nexport default ButtonClearAll;","import React from 'react';\nimport TaskItem from '../../elements/task'\nimport NewTask from '../newTask/index';\nimport ButtonClearAll from '../buttonClearAll/index';\nimport { Store, typeState } from '../../core/models/types';\nimport { Task } from '../../core/models/task';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state: Store) => ({\n    tasks: state.taskReducer,\n})\n\nconst TaskItemList: React.FC<any> = ( { tasks }: any) => {\n\n    return (\n        <div className=\"tasks-container\">\n            {\n                tasks.map((item:Task) => (<TaskItem\n                    id={item.id}\n                    date={item.date}\n                    text={item.text}\n                    expired={item.expired}\n                    key={item.id}\n                    />)\n                    )\n            }\n            <NewTask />\n            <ButtonClearAll />\n        </div>\n    );\n};\n\n\n\nexport default connect(mapStateToProps)(TaskItemList);\n","import React from 'react';\nimport './style.css';\n\nconst ButtonEvents: React.FC = () => {\n\n    return (\n        <a href=\"/events\">     \n            <div className=\"button-events\">\n                <span>Events</span>\n            </div>\n        </a>\n    );\n};\n\n\n\nexport default ButtonEvents;","import React from 'react';\nimport ButtonEvents from '../../elements/buttonEvents/index';\n\nconst Home: React.FC = () => {\n\n    return (\n        <div className=\"home-container\">\n            <ButtonEvents />\n        </div>\n    );\n};\n\n\n\nexport default Home;","import uuid from '../utils/generateUUID';\n\nexport const initialState = [\n    {\n        id: uuid(),\n        date: new Date(+new Date - 86400000),\n        text: 'Implementation testing application',\n        expired: false,\n    },\n    {\n        id: uuid(),\n        date: new Date(+new Date + 86400000),\n        text: 'Deploying testing application',\n        expired: false,\n    },\n    {\n        id: uuid(),\n        date: new Date(+new Date + 86900000),\n        text: 'Send testing application',\n        expired: false,\n    },\n];","import { typeState } from '../models/types';\n\nexport const isExpiredTask = (state: typeState): typeState => {\n    return state.map(task => {\n        if (new Date(task.date) >= new Date()) return task;\n        else {\n            task.expired = true;\n            return task;\n        } \n    });\n};","import { ActionsTypes } from '../utils/constants';\nimport { typeState, ActionsType } from '../models/types';\nimport { initialState } from '../../core/utils/initialState';\nimport { isExpiredTask } from '../../core/utils/isExpiredTask';\n\nfunction taskReducer(state: typeState = localStorage['redux-store'] ? JSON.parse(localStorage['redux-store']) : initialState, action: ActionsType): typeState {\n    state = isExpiredTask(state);\n    switch (action.type) {\n        case ActionsTypes.ADD_TASK: \n            return [\n                    ...state,\n                    {\n                        id: action.id,\n                        date: action.date,\n                        text: action.text,\n                        expired: action.expired,\n                    }\n                ]\n        case ActionsTypes.DELETE_TASK: \n            return state.filter( c => c.id !== action.id);\n        case ActionsTypes.DELETE_ALL_TASKS: \n            return [];\n        default:\n            return state;\n    }\n}\n\nexport default taskReducer;\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport taskReducer from './reducer';\nimport { Store } from '../models/types';\n\nconst reducers = combineReducers<Store>({ taskReducer })\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\n\nstore.subscribe(() => {\n    localStorage['redux-store'] = JSON.stringify(store.getState().taskReducer);\n});\n\nexport default store;\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Header from '../../elements/header/index';\nimport TaskList from '../../elements/taskList/index';\nimport Home from '../../container/home/index';\nimport { Provider } from 'react-redux';\nimport store  from '../../core/redux/store'\n\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <Header />\n      <Provider store={store}>\n        <HashRouter>\n          <Switch>\n            <Route path=\"/\" component={Home}/>\n            <Route exact path=\"/events\" component={TaskList}/>\n          </Switch>\n        </HashRouter>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}